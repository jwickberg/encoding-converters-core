' EncConverters Converter Install Script
'
'   The best suggestion for developing an EncConverters' Converter Install Script is to
'   look at the existing examples and go from there. The "SIL-IPA93.tec.vbs" script
'   is particularly good examples because it deals with multiple different fonts.
'
'   Use the following methods and properties of the EncConverters repository interface
'   to add your converter to the Encoding Converter's repository
'
'   ' for file-based converters like CC and TECkit, you can use this Add method
'   EncConverters.Add(mappingName As String, converterSpec As String, _
'       ConversionType As ConvType, [leftEncoding As String], [rightEncoding As String], _
'       [ProcessType As ProcessTypeFlags])
'
'       public enum ConvType 
'       {
'           Legacy_to_from_Unicode = 1,    // bidirectional conversion types
'           Legacy_to_from_Legacy = 2,
'           Unicode_to_from_Legacy = 3,
'           Unicode_to_from_Unicode = 4,
'           Legacy_to_Unicode = 5,         // unidirectional conversion 
'           Legacy_to_Legacy = 6,
'           Unicode_to_Legacy = 7,
'           Unicode_to_Unicode = 8
'       };
'
'       leftEncodingId is comparable with the 'EncodingName' or 'LhsName' from a TECkit .map
'       rightEncodingId is comparable with either "UNICODE" or 'RhsName' from a TECkit .map
'           (both of these parameters can be given as an empty string (i.e. "") if adding a 
'           TECkit map and the values will be retrieved from the .tec file itself). It is
'           also suggested that a Unicode encoding name be given (e.g. "Unicode IPA") for
'           the rightEncodingId (rather than the default "UNICODE") to indicate the range
'           of Unicode generated by the map (if there is a particular, well-defined range).
'
'       public enum ProcessTypeFlags 
'       {
'           DontKnow                        = &H0,
'           UnicodeEncodingConversion       = &H1,   // don't use for legacy<>legacy encoding conversion
'           Transliteration                 = &H2,
'           ICUTransliteration              = &H4,
'           ICUConverter                    = &H8,
'           CodePageConversion              = &H10,
'           NonUnicodeEncodingConversion    = &H20,
'           SpellFixerConverter             = &H40
'           // this can be added to by anyone (the enum is just for convenience), but should 
'           //  always represent a bit field.
'       };
'
'   // The following method is similar to 'Add' above, but allows you to provide more 
'   // converter attribute values (esp. implementationType)
'   EncConverters.AddConversionMap(mappingName As String, converterSpec As String, _
'       ConversionType As ConvType, ImplementType As String, [leftEncoding As String], _
'       [rightEncoding As String], [ProcessType As ProcessTypeFlags])
'       
'       implementType is one of: 
'           "cp"                // Window's code page
'           "SIL.cc"            // cc table
'           "SIL.tec"           // TECkit .tec (compiled) file
'           "SIL.map"           // TECkit .map (compilable) file
'           "ICU.conv"          // ICU converter
'           "ICU.trans"         // ICU transliterator
'           "SIL.comp"          // Compound (daisy-chained) converter
'           "SIL.Font2Iscii"    // Indic-specific converter using the Font2Iscii.exe converter
'           "SIL.ITrans"        // Indic-specific converter using the ITrans.exe converter
'           "SIL.UTrans"        // Indic-specific converter using the UTrans.exe converter
'
'       (or an alternate implementation type for a plug-in or some other conversion engine
'       not known by EncConverters)
'
'   // The following method can be used to daisy-chain multiple (existing) converters 
'   // together to be usable as a single converter. Note the 2nd parameter must be the 
'   // mapName of an existing converter. Also note that it is a good idea to call the
'   // Remove function first to remove any existing steps (in case it is reinstalled)
'   // since subsequent calls just add a new step.
'   EncConverters.AddCompoundConverterStep(compoundMappingName As String, _
'       converterStepMapName As String, [DirectionForward As Boolean], _
'       [NormalizeOutput As NormalizeFlags])
'
'       where:
'       DirectionForward indicates whether the step's conversion should be used in the 
'           'Forward' direction when the compound converter is use in the Forward direction.
'
'       NormalizeOutput is one of:
'       public enum NormalizeFlags
'       {
'           NormalizeFlags_None = 0,
'           NormalizeFlags_FullyComposed = &H100,
'           NormalizeFlags_FullyDecomposed = &H200
'       }
'
'   // As mentioned, it's a good idea to remove the compound map first, so use this function:
'   EncConverters.Remove(mapName as String)
'
'   EncConverters.AddFont(string fontName, int codePage, string defineEncoding)
'
'       fontName is the facename of the font (e.g. "SILDoulos IPA93")
'       codePage should be '42' for a symbol font, '1252' for hacked-1252 code page font
'       defineEncoding should be the encoding name uniquely defined by this font (if one
'           is uniquely defined by the font name).
'
'   EncConverters.AddUnicodeFontEncoding(string fontName, string unicodeEncoding)
'
'       fontName is the facename of the Unicode font (e.g. "Doulos SIL")
'       unicodeEncoding should be the Unicode encoding name (one per call) that this font
'           can be used for (e.g. AddUnicodeFontEncoding "Doulos SIL", "Unicode IPA")
'
'   EncConverterts.AddFontMapping(string mappingName, string fontName, string assocFontName)
'
'       mappingName is the name of the mapping that will contain this fontMapping
'       fontName is the name of the font associated with the left side of the mapping
'       assocFontName is the name of the font associated with the right side of the mapping
'       (all three items must already exist in the repository when this is called)
'        
'   // to assign arbitrary properties to a converter (based on 'mapName'), an encoding (based
'   // on the encodingName), or a font (based on the 'fontName'), use the following object:
'   ECProperties EncConverters.Properties(string sItem, PropertyType repositoryItem)
'
'       public enum PropertyType
'       {
'           Converter       = 0,    // for a 'mapping/spec' entry (i.e. an actual converter)
'           EncodingID      = 1,    // for an 'encoding' entry
'           FontName        = 2     // for a 'font' node
'       };
'   
'   ECProperties.Add(string Key, string Value)
'
'   See SilEncConverters.tlb for more details.
'
